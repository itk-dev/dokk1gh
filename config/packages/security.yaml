security:
    role_hierarchy:
        !php/enum App\Entity\Role::GUEST_ADMIN->value:
            - !php/enum App\Entity\Role::USER->value
        !php/enum App\Entity\Role::USER_ADMIN->value:
            - !php/enum App\Entity\Role::USER->value
            - ROLE_API_ADMIN
        !php/enum App\Entity\Role::CONFIG_ADMIN->value:
            - !php/enum App\Entity\Role::USER->value
        !php/enum App\Entity\Role::TEMPLATE_ADMIN->value:
            - !php/enum App\Entity\Role::USER->value
            - ROLE_API_ADMIN
        !php/enum App\Entity\Role::ADMIN->value:
            - !php/enum App\Entity\Role::USER_ADMIN->value
            - !php/enum App\Entity\Role::GUEST_ADMIN->value
            - !php/enum App\Entity\Role::TEMPLATE_ADMIN->value
        # Roles used solely for access checks, but are not assignable to a user.
        ROLE_ADMIN_API:
        ROLE_SUPER_ADMIN:
            - !php/enum App\Entity\Role::ADMIN->value
            - !php/enum App\Entity\Role::CONFIG_ADMIN->value

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

        api_user_provider:
            entity:
                class: App\Entity\User
                property: apiKey

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

        api:
            pattern: ^/api
            provider: api_user_provider
            # @todo
            # guard:
            #     authenticators:
            #         - App\Security\ApiKeyAuthenticator
            # # @see https://symfony.com/doc/current/reference/configuration/security.html#firewall-context
            # @todo
            # context: primary_auth
            # @todo
            # logout_on_user_change: true

        mock:
            pattern: ^/mock
            security: false

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Why do we need this here when security.firewalls.mock.security === false?
        - { path: ^/mock, roles: PUBLIC_ACCESS }
        - { path: ^/app, roles: PUBLIC_ACCESS }
        - { path: ^/cms, roles: PUBLIC_ACCESS }
        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/reset-password, roles: PUBLIC_ACCESS }
        - { path: ^/api/admin, roles: [ROLE_ADMIN_API] }
        - { path: ^/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
